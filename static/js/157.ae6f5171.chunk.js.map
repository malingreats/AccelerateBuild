{"version":3,"sources":["ui-component/cards/ContactList.js","views/application/contact/List/index.js"],"names":["avatarImage","require","useStyles","makeStyles","theme","followerBlock","padding","borderBottom","borderTop","borderColor","palette","mode","dark","main","grey","profileAvatar","width","height","ContactList","avatar","name","role","onActive","useTheme","classes","avatarProfile","default","className","Grid","container","alignItems","spacing","gridSpacing","item","xs","sm","onClick","style","cursor","sx","flexWrap","Avatar","alt","src","zeroMinWidth","Typography","variant","component","justifyContent","breakpoints","down","Tooltip","placement","title","Button","minWidth","p","fontSize","color","smallDrawer","margin","CardListPage","React","useState","data","setData","getData","a","axios","get","response","users","reduce","curr","firstLatter","toUpperCase","Object","prototype","hasOwnProperty","call","push","useEffect","user","setUser","modifyUser","u","post","then","d","idx","findIndex","id","userDetails","setUserDetails","userEdit","setUserEdit","MainCard","display","md","OutlinedInput","placeholder","fullWidth","startAdornment","InputAdornment","position","stroke","size","startIcon","company","work_email","personal_email","work_phone","personal_phone","location","image","User1","status","lastMessage","birthdayText","keys","map","key","index","Fragment","direction","userRow","i","email","contact","phone","UserDetails","onEditClick","onClose","UserEdit","onSave","onCancel"],"mappings":"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","file":"static/js/157.ae6f5171.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Button, Grid, Tooltip, Typography } from '@material-ui/core';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport ChatBubbleTwoToneIcon from '@material-ui/icons/ChatBubbleTwoTone';\r\nimport PhoneTwoToneIcon from '@material-ui/icons/PhoneTwoTone';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    followerBlock: {\r\n        padding: '15px 0',\r\n        borderBottom: '1px solid',\r\n        borderTop: '1px solid',\r\n        borderColor: theme.palette.mode === 'dark' ? `${theme.palette.dark.main} !important` : `${theme.palette.grey[100]} !important`\r\n    },\r\n    profileAvatar: {\r\n        width: '48px',\r\n        height: '48px'\r\n    }\r\n}));\r\n\r\n// ===========================|| USER CONTACT LIST ||=========================== //\r\n\r\nconst ContactList = ({ avatar, name, role, onActive }) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const avatarProfile = avatar && avatarImage(`./${avatar}`).default;\r\n\r\n    return (\r\n        <div className={classes.followerBlock}>\r\n            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    sm={6}\r\n                    onClick={() => {\r\n                        if (onActive) onActive();\r\n                    }}\r\n                    style={{ cursor: 'pointer' }}\r\n                >\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ flexWrap: 'nowrap' }}>\r\n                        <Grid item>\r\n                            <Avatar alt={name} src={avatarProfile} className={classes.profileAvatar} />\r\n                        </Grid>\r\n                        <Grid item sm zeroMinWidth>\r\n                            <Grid container spacing={0}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"h4\" component=\"div\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"caption\">{role}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Grid\r\n                        container\r\n                        spacing={1}\r\n                        sx={{ justifyContent: 'flex-end', [theme.breakpoints.down('sm')]: { justifyContent: 'flex-start' } }}\r\n                    >\r\n                        <Grid item>\r\n                            <Tooltip placement=\"top\" title=\"Message\">\r\n                                <Button variant=\"outlined\" sx={{ minWidth: '32px', height: '32px', p: 0 }}>\r\n                                    <ChatBubbleTwoToneIcon fontSize=\"small\" />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Tooltip placement=\"top\" title=\"Call\">\r\n                                <Button variant=\"outlined\" color=\"secondary\" sx={{ minWidth: '32px', height: '32px', p: 0 }}>\r\n                                    <PhoneTwoToneIcon fontSize=\"small\" />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    avatar: PropTypes.string,\r\n    name: PropTypes.string,\r\n    onActive: PropTypes.func,\r\n    role: PropTypes.string\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Button, Grid, InputAdornment, OutlinedInput, Typography } from '@material-ui/core';\r\n\r\n// project imports\r\nimport UserDetails from '../UserDetails';\r\nimport UserEdit from '../UserEdit';\r\nimport ContactList from 'ui-component/cards/ContactList';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport axios from 'utils/axios';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport { IconSearch } from '@tabler/icons';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\n\r\nimport User1 from 'assets/images/users/avatar-1.png';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    smallDrawer: {\r\n        width: '342px',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: '0 auto'\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTACT LIST ||=========================== //\r\n\r\nconst CardListPage = () => {\r\n    const classes = useStyles();\r\n\r\n    // get all users details\r\n    const [data, setData] = React.useState([]);\r\n    const convertData = (userData) =>\r\n        userData.reduce((a, curr) => {\r\n            const firstLatter = curr.name[0].toUpperCase();\r\n\r\n            if (Object.prototype.hasOwnProperty.call(a, firstLatter)) {\r\n                a[firstLatter].push(curr);\r\n            } else {\r\n                a[firstLatter] = [curr];\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n    const getData = async () => {\r\n        const response = await axios.get('/api/chat/users');\r\n        setData(convertData(response.data.users));\r\n        return response.data.users;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        getData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // edit selected user and modify users data\r\n    const [user, setUser] = React.useState({});\r\n    const modifyUser = async (u) => {\r\n        await axios.post('/api/chat/users/modify', u);\r\n        getData().then((d) => {\r\n            if (user) {\r\n                const idx = d.findIndex((item) => item.id === user.id);\r\n                if (idx > -1) setUser(d[idx]);\r\n            }\r\n        });\r\n    };\r\n\r\n    // handle new user insert action\r\n    const [userDetails, setUserDetails] = React.useState(false);\r\n    const [userEdit, setUserEdit] = React.useState(false);\r\n    const handleOnAdd = () => {\r\n        setUser({\r\n            name: '',\r\n            company: '',\r\n            role: '',\r\n            work_email: '',\r\n            personal_email: '',\r\n            work_phone: '',\r\n            personal_phone: '',\r\n            location: 'USA',\r\n            image: User1,\r\n            status: 'I am online',\r\n            lastMessage: '2h ago',\r\n            birthdayText: ''\r\n        });\r\n        setUserDetails(false);\r\n        setUserEdit(true);\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Contact List\">\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs zeroMinWidth sx={{ display: userDetails || userEdit ? { xs: 'none', md: 'block' } : 'block' }}>\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <OutlinedInput\r\n                                id=\"input-search-card-style1\"\r\n                                placeholder=\"Search Contact\"\r\n                                fullWidth\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                startIcon={<AddCircleOutlineOutlinedIcon />}\r\n                                sx={{ p: '12px 22px' }}\r\n                                onClick={handleOnAdd}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        {Object.keys(data).map((key, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"h4\" color=\"primary\" sx={{ fontSize: '16px' }}>\r\n                                        {key.toUpperCase()}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container direction=\"row\" spacing={0}>\r\n                                        {data[key].map((userRow, i) => (\r\n                                            <Grid item xs={12} key={i}>\r\n                                                <ContactList\r\n                                                    avatar={userRow.avatar}\r\n                                                    name={userRow.name}\r\n                                                    role={userRow.role}\r\n                                                    email={userRow.work_email}\r\n                                                    contact={userRow.phone}\r\n                                                    location={userRow.location}\r\n                                                    onActive={() => {\r\n                                                        setUser(userRow);\r\n                                                        setUserDetails(true);\r\n                                                        setUserEdit(false);\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n                {userDetails && (\r\n                    <Grid item className={classes.smallDrawer}>\r\n                        <UserDetails\r\n                            user={user}\r\n                            onEditClick={() => {\r\n                                setUserDetails(false);\r\n                                setUserEdit(true);\r\n                            }}\r\n                            onClose={() => {\r\n                                setUserDetails(false);\r\n                                setUserEdit(false);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n\r\n                {userEdit && (\r\n                    <Grid item className={classes.smallDrawer}>\r\n                        <UserEdit\r\n                            user={user}\r\n                            onSave={(u) => {\r\n                                if (u.id) setUserDetails(true);\r\n                                setUserEdit(false);\r\n                                modifyUser(u);\r\n                            }}\r\n                            onCancel={(u) => {\r\n                                if (u.id) setUserDetails(true);\r\n                                setUserEdit(false);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default CardListPage;\r\n"],"sourceRoot":""}